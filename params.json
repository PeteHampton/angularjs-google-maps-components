{"name":"Angularjs-google-maps-components","tagline":"Making google maps components with AngularJS","body":"## Awesome Google Maps Components with AngularJS\r\n\r\n## Making  Google Maps Components with AngularJS\r\n\r\n### The setup\r\nI been hacking with AngularJS since the start of the year.  I really enjoy the framework, but outside of personal and side projects, I really hadn't found a good way to get it into the toolkit at work. I thought maps would be a good opportunity. I had already chipped in with two Google Maps pieces this year. Unfortunately though, I was only helping some people who were inexperienced with javascript, and wouldn't be maintaining or even putting the finishing touches on those projects.  I looked into using some of the open source google maps directives out there (great job on all of them), but at the end it was too much to hand off to someone who wasn't the strongest javascript developer, and ending up acquiescing to use jQuery and Handlebars. \r\n\r\nFinally, a project came around which I would be maintaining and felt this would be a great opportunity to see if AngularJS could fit. After getting to the point of just writing it explicitly, I saw a really simple workflow for setting up and creating your map directive that can lead to a pretty immersive and distinguished map. \r\n\r\n#### Link Function\r\nThe simplest situation is just setting up a map with a starting location. Using the directive link function instantiate the map seems to do a great job. \r\n\r\n```javascript\r\nangular.module('mapComponentsApp', []).directive('helloMaps', function () {\r\n  return function (scope, elem, attrs) {\r\n    var mapOptions,\r\n      latitude = attrs.latitude,\r\n      longitude = attrs.longitude,\r\n      map;\r\n\r\n    latitude = latitude && parseFloat(latitude, 10) || 43.074688;\r\n    longitude = longitude && parseFloat(longitude, 10) || -89.384294;\r\n\r\n    mapOptions = {\r\n      zoom: 8,\r\n      center: new google.maps.LatLng(latitude, longitude)\r\n    };\r\n\r\n    map = new google.maps.Map(elem[0], mapOptions);\r\n  };\r\n});\r\n```\r\nYou could use a directive controller, and would be straightforward using both. I created an [demo]()/[source file]() which shows a simple map example. \r\n\r\n#### Custom Controls\r\nNow, it wasn't until I had realized the ease with which I could add data-binded custom controls, that I knew that AngularJS could help making really ambitions maps applications not only possible, but very manageable. After tinkering with a few situations, I recognized that using the [$compile](http://docs.angularjs.org/api/ng.$compile) service to compile HTML into an AngularJS template and link it to the directive's scope fits perfectly. Ends up being three lines. I left the templates as strings as there are opportunites to use pre-angular templating systems, such as [JavaScript Micro-Templating](http://ejohn.org/blog/javascript-micro-templating/) to offload some of the logic that wouldn't need to be managed by AngularJS.\r\n\r\n```javascript\r\nvar controlTemplate = document.getElementById('helloControl').innerHTML.trim();\r\nvar controlElem = $compile(controlTemplate)(scope);\r\nmap.controls[google.maps.ControlPosition.TOP_LEFT].push(controlElem[0]);\r\n```\r\n\r\nI created an [demo]()/[source file]() to show the data-binded custom controls in action.\r\n\r\n#### Binding to Map\r\nThere end up being two parts to the binding. one will be reciveing data from map events, the other is making the map reacting to scope changes. \r\n\r\nI figured getting a lat/long would be a good proof of concept and here it is [demo]()/[source file](). \r\n\r\nResponding to map event is done basically the same way Google Maps advices with the slight Angular twist of a ```scope.$apply``` to make sure the changes are reflected in Angular. \r\n\r\n```javascript\r\nfunction centerChangedCallback (scope, map) {\r\n  return function () {\r\n    var center = map.getCenter();\r\n    scope.latitude = center.lat();\r\n    scope.longitude = center.lng();\r\n    if(!scope.$$phase) scope.$apply();\r\n  };\r\n}\r\ngoogle.maps.event.addListener(map, 'center_changed', centerChangedCallback(scope, map));\r\n```\r\n\r\nTo get the scope changes pushed back to the map we need to write a binging against the scope. It seemed to be the time to add a controller to the directice. I created a controller instance function ```this.registerMap = function (myMap) {...};``` to pass the map instance to the controller once it had been created. ```ctrl.registerMap(map);```. At this point, it's a straightforward ```$scope.$watch``` to get the scope data reflected back onto the map.\r\n\r\n```javascript\r\n$scope.$watch('latitude + longitude', function (newValue, oldValue) {\r\n  if (newValue !== oldValue) { \r\n    var center = map.getCenter(),\r\n      latitude = center.lat(),\r\n      longitude = center.lng();\r\n    if ($scope.latitude !== latitude || $scope.longitude !== longitude)\r\n      map.setCenter(new google.maps.LatLng($scope.latitude, $scope.longitude));\r\n  }\r\n});\r\n```\r\n\r\n#### Closing\r\nAt this point there only one thing left todo.... todo maps [demo]()/[source file](). Even thought it end up being a fair bit of code the most important code is the link function of the todoMaps directive (at the bottom of source), which is it still digestable, and is the core of the entire application.\r\n\r\n#### Tools\r\nThe only tools I used for these examples were \r\n[AngularJS](http://angularjs.org/)\r\n[Google Maps](https://developers.google.com/maps/documentation/javascript/tutorial)\r\n[YUI's Pure Css Frameworks](http://purecss.io/)\r\n\r\n#### Summary\r\nThere were no other external dependencies for these samples nor do i believe any would they have made making these components any easier (angular has $http for ajax requests)\r\n\r\n#### I think this is big\r\nThis is an awesome use case that should have AngularJS showing up in a lot of places. As someone writes a map a least once or twice a year, I feel it's a much more pleasant workflow than using jQuery/Handlebars, Not to mention the easy assess to data-binded custom map controls and the savvy look and feature set your map could achieve pretty easily.\r\n\r\n#### What didn't i do.\r\nIsolate the scope. -  You can do it if you needed to add multiple instances. \r\nAnnotate for compilation. -  Not needed for the article. \r\n\r\n#### Learn more about AngularJS\r\nHopefully, if you don't know AngularJS, you are now interested. A great list of [AngularJS resources](https://github.com/jmcunningham/AngularJS-Learning), started by @jmcunningham has tons of great info from articles to videos to books. \r\n\r\nHappy Coding, wbyoko\r\n[Twitter](https://twitter.com/wbyoko) / \r\n[Github](https://github.com/wbyoko/)","google":"UA-28995990-3","note":"Don't delete this file! It's used internally to help with page regeneration."}